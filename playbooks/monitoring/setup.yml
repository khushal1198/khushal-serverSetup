---
- name: Setup Monitoring Stack (Prometheus + Grafana)
  hosts: servers
  become: yes
  vars:
    monitoring_namespace: "monitoring"
    grafana_admin_password: "admin123"  # Change this!
    grafana_nodeport: 32000
    prometheus_nodeport: 32001
  environment:
    KUBECONFIG: "/etc/rancher/k3s/k3s.yaml"
  tasks:
    - include_tasks: setup-tasks.yml

    - name: Create monitoring namespace
      command: kubectl create namespace {{ monitoring_namespace }}
      register: namespace_result
      changed_when: namespace_result.rc == 0
      ignore_errors: true

    - name: Add Prometheus Helm repository
      command: helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
      register: helm_repo_add
      changed_when: helm_repo_add.rc == 0

    - name: Update Helm repositories
      command: helm repo update
      register: helm_update
      changed_when: helm_update.rc == 0

    - name: Install Prometheus with Node Exporter
      command: >
        helm install prometheus prometheus-community/kube-prometheus-stack 
        --namespace {{ monitoring_namespace }} 
        --create-namespace 
        --set prometheus.prometheusSpec.serviceMonitorSelectorNilUsesHelmValues=false
        --set prometheus.prometheusSpec.podMonitorSelectorNilUsesHelmValues=false
        --set prometheus.prometheusSpec.ruleSelectorNilUsesHelmValues=false
        --set prometheus.prometheusSpec.probeSelectorNilUsesHelmValues=false
        --set grafana.enabled=true
        --set grafana.adminPassword={{ grafana_admin_password }}
        --set grafana.service.type=NodePort
        --set grafana.service.nodePort={{ grafana_nodeport }}
        --set prometheus.service.type=NodePort
        --set prometheus.service.nodePort={{ prometheus_nodeport }}
        --set prometheus.nodeExporter.enabled=true
        --set prometheus.nodeExporter.service.type=NodePort
        --set prometheus.nodeExporter.service.nodePort=32002
      register: prometheus_install
      changed_when: prometheus_install.rc == 0

    - name: Wait for Prometheus pods to be ready
      command: kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=prometheus -n {{ monitoring_namespace }} --timeout=300s
      register: prometheus_ready
      changed_when: prometheus_ready.rc == 0

    - name: Wait for Grafana pod to be ready
      command: kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=grafana -n {{ monitoring_namespace }} --timeout=300s
      register: grafana_ready
      changed_when: grafana_ready.rc == 0

    - name: Get server public IP
      command: curl -s ifconfig.me
      register: public_ip
      changed_when: false
      ignore_errors: true

    - name: Print monitoring access instructions
      debug:
        msg: |
          ========================================
          MONITORING STACK SETUP COMPLETE
          ========================================
          
          ========================================
          ACCESS OPTIONS
          ========================================
          
          Option 1 - Direct NodePort (temporary):
          Grafana: http://{{ public_ip.stdout | default(ansible_host) }}:{{ grafana_nodeport }}
          Prometheus: http://{{ public_ip.stdout | default(ansible_host) }}:{{ prometheus_nodeport }}
          Node Exporter: http://{{ public_ip.stdout | default(ansible_host) }}:32002/metrics
          
          Option 2 - Through Ingress (recommended):
          Create Ingress resources to access via:
          Grafana: http://{{ public_ip.stdout | default(ansible_host) }}:30080/grafana
          Prometheus: http://{{ public_ip.stdout | default(ansible_host) }}:30080/prometheus
          
          ========================================
          CREDENTIALS
          ========================================
          
          Grafana:
          Username: admin
          Password: {{ grafana_admin_password }}
          
          ========================================
          NEXT STEPS
          ========================================
          
          1. Create Ingress resources for Grafana and Prometheus
          2. Access via Ingress Controller for better security
          3. Import dashboards in Grafana for:
             - Node Exporter (server metrics)
             - Kubernetes cluster metrics
          4. Configure alerts if needed
          5. No firewall rules needed - handled by Ingress 