- name: Create monitoring namespace
  command: kubectl create namespace {{ monitoring_namespace }}
  register: namespace_result
  changed_when: namespace_result.rc == 0
  ignore_errors: true
  vars:
    monitoring_namespace: "monitoring"

- name: Add Prometheus Helm repository
  command: helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
  register: helm_repo_add
  changed_when: helm_repo_add.rc == 0

- name: Update Helm repositories
  command: helm repo update
  register: helm_update
  changed_when: helm_update.rc == 0

- name: Install Prometheus with Node Exporter
  command: >
    helm upgrade --install prometheus prometheus-community/kube-prometheus-stack 
    --namespace {{ monitoring_namespace }} 
    --create-namespace 
    --set prometheus.prometheusSpec.serviceMonitorSelectorNilUsesHelmValues=false
    --set prometheus.prometheusSpec.podMonitorSelectorNilUsesHelmValues=false
    --set prometheus.prometheusSpec.ruleSelectorNilUsesHelmValues=false
    --set prometheus.prometheusSpec.probeSelectorNilUsesHelmValues=false
    --set grafana.enabled=true
    --set grafana.adminPassword={{ grafana_admin_password }}
    --set grafana.service.type=NodePort
    --set grafana.service.nodePort={{ grafana_nodeport }}
    --set grafana."grafana.ini".server.root_url=http://{{ ansible_host }}:30080/grafana/
    --set grafana."grafana.ini".server.serve_from_sub_path=true
    --set prometheus.service.type=NodePort
    --set prometheus.service.nodePort={{ prometheus_nodeport }}
    --set prometheus.prometheusSpec.externalUrl=http://{{ ansible_host }}:30080/prometheus
    --set prometheus.nodeExporter.enabled=true
    --set prometheus.nodeExporter.service.type=NodePort
    --set prometheus.nodeExporter.service.nodePort=32002
  register: prometheus_install
  changed_when: prometheus_install.rc == 0
  vars:
    monitoring_namespace: "monitoring"
    grafana_admin_password: "admin123"
    grafana_nodeport: 32000
    prometheus_nodeport: 32001

- name: Create Grafana ingress resource
  copy:
    dest: /tmp/grafana-ingress.yaml
    content: |
      apiVersion: networking.k8s.io/v1
      kind: Ingress
      metadata:
        name: grafana-ingress
        namespace: monitoring
        annotations:
          nginx.ingress.kubernetes.io/rewrite-target: /grafana/$2
          nginx.ingress.kubernetes.io/use-regex: "true"
          nginx.ingress.kubernetes.io/proxy-buffering: "off"
      spec:
        ingressClassName: nginx
        rules:
        - http:
            paths:
            - path: /grafana(/|$)(.*)
              pathType: ImplementationSpecific
              backend:
                service:
                  name: prometheus-grafana
                  port:
                    number: 80

- name: Create Prometheus ingress resource
  copy:
    dest: /tmp/prometheus-ingress.yaml
    content: |
      apiVersion: networking.k8s.io/v1
      kind: Ingress
      metadata:
        name: prometheus-ingress
        namespace: monitoring
        annotations:
          nginx.ingress.kubernetes.io/rewrite-target: /prometheus/$2
          nginx.ingress.kubernetes.io/use-regex: "true"
          nginx.ingress.kubernetes.io/proxy-buffering: "off"
      spec:
        ingressClassName: nginx
        rules:
        - http:
            paths:
            - path: /prometheus(/|$)(.*)
              pathType: ImplementationSpecific
              backend:
                service:
                  name: prometheus-kube-prometheus-prometheus
                  port:
                    number: 9090

- name: Apply monitoring ingress resources
  command: kubectl apply -f /tmp/grafana-ingress.yaml -f /tmp/prometheus-ingress.yaml
  register: monitoring_ingress_apply
  changed_when: monitoring_ingress_apply.rc == 0

- name: Wait for Grafana pod to be ready
  command: kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=grafana -n monitoring --timeout=300s
  register: grafana_ready
  changed_when: grafana_ready.rc == 0

- name: Verify Grafana configmap has correct settings
  command: kubectl get configmap prometheus-grafana -n monitoring -o jsonpath='{.data.grafana\.ini}'
  register: grafana_config
  changed_when: false

- name: Patch Grafana configmap if root_url is missing
  command: >
    kubectl patch configmap prometheus-grafana -n monitoring --type=merge 
    -p='{"data":{"grafana.ini":"[analytics]\ncheck_for_updates = true\n[grafana_net]\nurl = https://grafana.net\n[log]\nmode = console\n[paths]\ndata = /var/lib/grafana/\nlogs = /var/log/grafana\nplugins = /var/lib/grafana/plugins\nprovisioning = /etc/grafana/provisioning\n[server]\ndomain = \"\"\nroot_url = http://{{ ansible_host }}:30080/grafana/\nserve_from_sub_path = true"}}'
  register: grafana_patch
  changed_when: grafana_patch.rc == 0
  when: "'root_url' not in grafana_config.stdout"

- name: Restart Grafana if config was patched
  command: kubectl rollout restart deployment prometheus-grafana -n monitoring
  register: grafana_restart
  changed_when: grafana_restart.rc == 0
  when: grafana_patch is changed

- name: Wait for Grafana pod to be ready after restart
  command: kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=grafana -n monitoring --timeout=300s
  register: grafana_ready_after_restart
  changed_when: grafana_ready_after_restart.rc == 0
  when: grafana_restart is changed

- name: Get server public IP
  command: curl -s ifconfig.me
  register: public_ip
  changed_when: false
  ignore_errors: true

- name: Print monitoring access instructions
  debug:
    msg: |
      ========================================
      MONITORING STACK SETUP COMPLETE
      ========================================
      
      ========================================
      ACCESS OPTIONS
      ========================================
      
      Option 1 - Direct NodePort (temporary):
      Grafana: http://{{ public_ip.stdout | default(ansible_host) }}:{{ grafana_nodeport }}
      Prometheus: http://{{ public_ip.stdout | default(ansible_host) }}:{{ prometheus_nodeport }}
      Node Exporter: http://{{ public_ip.stdout | default(ansible_host) }}:32002/metrics
      
      Option 2 - Through Ingress (recommended):
      Grafana: http://{{ public_ip.stdout | default(ansible_host) }}:30080/grafana (or grafana.local:30080)
      Prometheus: http://{{ public_ip.stdout | default(ansible_host) }}:30080/prometheus (or prometheus.local:30080)
      
      ========================================
      CREDENTIALS
      ========================================
      
      Grafana:
      Username: admin
      Password: {{ grafana_admin_password }}
      
      ========================================
      NEXT STEPS
      ========================================
      
      1. Access via Ingress Controller for better security
      2. Import dashboards in Grafana for:
         - Node Exporter (server metrics)
         - Kubernetes cluster metrics
      3. Configure alerts if needed
      4. No firewall rules needed - handled by Ingress
  vars:
    grafana_admin_password: "admin123"
    grafana_nodeport: 32000
    prometheus_nodeport: 32001 