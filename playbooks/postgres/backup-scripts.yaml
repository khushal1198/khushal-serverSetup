apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-backup-scripts
  namespace: postgres
data:
  backup.sh: |
    #!/bin/bash
    set -e
    
    echo "Starting PostgreSQL backup at $(date)"
    
    # Create backup filename with timestamp
    BACKUP_FILE="/backup/backup_$(date +%Y%m%d_%H%M%S).sql"
    
    # Perform backup
    PGPASSWORD="${POSTGRES_PASSWORD}" pg_dump \
      -h postgresql \
      -U postgres \
      -d "${POSTGRES_DB}" \
      --verbose \
      --clean \
      --if-exists \
      --no-owner \
      --no-privileges > "${BACKUP_FILE}"
    
    # Create/update latest backup symlink
    ln -sf "${BACKUP_FILE}" /backup/latest_backup.sql
    
    # Clean up old backups (keep last 10)
    cd /backup
    ls -t backup_*.sql | tail -n +11 | xargs -r rm -f
    
    echo "Backup completed: ${BACKUP_FILE}"
    echo "Backup size: $(du -h ${BACKUP_FILE} | cut -f1)"
    
  restore.sh: |
    #!/bin/bash
    set -e
    
    if [ ! -f /backup/latest_backup.sql ]; then
      echo "No backup file found at /backup/latest_backup.sql"
      exit 0
    fi
    
    echo "Restoring from backup: /backup/latest_backup.sql"
    
    # Wait for PostgreSQL to be ready
    until PGPASSWORD="${POSTGRES_PASSWORD}" psql -h postgresql -U postgres -d postgres -c '\q'; do
      echo "Waiting for PostgreSQL to be ready..."
      sleep 2
    done
    
    # Create database if it doesn't exist
    PGPASSWORD="${POSTGRES_PASSWORD}" psql -h postgresql -U postgres -d postgres -c "CREATE DATABASE ${POSTGRES_DB};" || true
    
    # Restore backup
    PGPASSWORD="${POSTGRES_PASSWORD}" psql \
      -h postgresql \
      -U postgres \
      -d "${POSTGRES_DB}" \
      -f /backup/latest_backup.sql
    
    echo "Database restored successfully!" 