- name: Create PostgreSQL namespace
  command: kubectl create namespace postgres
  register: namespace_result
  changed_when: namespace_result.rc == 0
  ignore_errors: true

- name: Add Bitnami Helm repository
  command: helm repo add bitnami https://charts.bitnami.com/bitnami
  register: helm_repo_add
  changed_when: helm_repo_add.rc == 0

- name: Update Helm repositories
  command: helm repo update
  register: helm_update
  changed_when: helm_update.rc == 0

- name: Install PostgreSQL using Helm
  command: >
    helm upgrade --install postgresql bitnami/postgresql 
    --namespace postgres 
    --create-namespace 
    --set auth.postgresPassword={{ postgres_password }}
    --set auth.database={{ postgres_database }}
    --set primary.service.type=NodePort
    --set primary.service.nodePorts.postgresql={{ postgres_nodeport }}
    --set primary.persistence.enabled=true
    --set primary.persistence.size={{ postgres_storage_size }}
    --set metrics.enabled=true
    --set metrics.serviceMonitor.enabled=true
  register: postgresql_install
  changed_when: postgresql_install.rc == 0
  vars:
    postgres_password: "admin123"
    postgres_database: "myapp"
    postgres_nodeport: 32543
    postgres_storage_size: "8Gi"

- name: Wait for PostgreSQL pod to be ready (initial)
  command: kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=postgresql -n postgres --timeout=300s
  register: postgresql_initial_ready
  changed_when: postgresql_initial_ready.rc == 0

- name: Copy schema initialization script to server
  copy:
    src: schema-init.sql
    dest: /tmp/postgres-schema-init.sql
  register: schema_init_copy

- name: Copy schema initialization script to PostgreSQL container
  command: kubectl cp /tmp/postgres-schema-init.sql postgres/postgresql-0:/tmp/schema-init.sql
  register: schema_copy_to_pod
  changed_when: schema_copy_to_pod.rc == 0

- name: Initialize production and testing schemas
  command: >
    kubectl exec -n postgres postgresql-0 -- bash -c 
    "PGPASSWORD=admin123 psql -U postgres -d myapp -f /tmp/schema-init.sql"
  register: schema_init
  changed_when: schema_init.rc == 0

- name: Copy backup storage PVC to server
  copy:
    src: backup-pvc.yaml
    dest: /tmp/postgres-backup-pvc.yaml
  register: backup_pvc_copy

- name: Apply backup storage PVC
  command: kubectl apply -f /tmp/postgres-backup-pvc.yaml
  register: backup_pvc_apply
  changed_when: backup_pvc_apply.rc == 0

- name: Copy backup scripts ConfigMap to server
  copy:
    src: backup-scripts.yaml
    dest: /tmp/postgres-backup-scripts.yaml
  register: backup_scripts_copy

- name: Apply backup scripts ConfigMap
  command: kubectl apply -f /tmp/postgres-backup-scripts.yaml
  register: backup_scripts_apply
  changed_when: backup_scripts_apply.rc == 0

- name: Copy backup CronJob to server
  copy:
    src: backup-cronjob.yaml
    dest: /tmp/postgres-backup-cronjob.yaml
  register: backup_cronjob_copy

- name: Apply backup CronJob
  command: kubectl apply -f /tmp/postgres-backup-cronjob.yaml
  register: backup_cronjob_apply
  changed_when: backup_cronjob_apply.rc == 0

- name: Copy restore job template to server
  copy:
    src: restore-job.yaml
    dest: /tmp/postgres-restore-job.yaml
  register: restore_job_copy

- name: Copy production restore job template to server
  copy:
    src: restore-prod-job.yaml
    dest: /tmp/postgres-restore-prod-job.yaml
  register: restore_prod_job_copy

- name: Copy test restore job template to server
  copy:
    src: restore-test-job.yaml
    dest: /tmp/postgres-restore-test-job.yaml
  register: restore_test_job_copy

- name: Copy schema info job template to server
  copy:
    src: schema-info-job.yaml
    dest: /tmp/postgres-schema-info-job.yaml
  register: schema_info_job_copy

- name: Create pgAdmin deployment
  copy:
    dest: /tmp/pgadmin-deployment.yaml
    content: |
      apiVersion: apps/v1
      kind: Deployment
      metadata:
        name: pgadmin4
        namespace: postgres
        labels:
          app: pgadmin4
      spec:
        replicas: 1
        selector:
          matchLabels:
            app: pgadmin4
        template:
          metadata:
            labels:
              app: pgadmin4
          spec:
            containers:
            - name: pgadmin4
              image: dpage/pgadmin4:latest
              ports:
              - containerPort: 80
              env:
              - name: PGADMIN_DEFAULT_EMAIL
                value: "{{ pgadmin_email }}"
              - name: PGADMIN_DEFAULT_PASSWORD
                value: "{{ pgadmin_password }}"
              - name: PGADMIN_CONFIG_ENHANCED_COOKIE_PROTECTION
                value: "True"
              - name: PGADMIN_CONFIG_LOGIN_BANNER
                value: "\"Authorised users only!\""
              - name: PGADMIN_CONFIG_CONSOLE_LOG_LEVEL
                value: "10"
              - name: PGADMIN_SERVER_JSON_FILE
                value: "/pgadmin4/servers.json"
              volumeMounts:
              - name: pgadmin-storage
                mountPath: /var/lib/pgadmin
              - name: servers-config
                mountPath: /pgadmin4/servers.json
                subPath: servers.json
            volumes:
            - name: pgadmin-storage
              persistentVolumeClaim:
                claimName: pgadmin-pvc
            - name: servers-config
              configMap:
                name: pgadmin-servers
      ---
      apiVersion: v1
      kind: ConfigMap
      metadata:
        name: pgadmin-servers
        namespace: postgres
      data:
        servers.json: |
          {
            "Servers": {
              "1": {
                "Name": "PostgreSQL Server",
                "Group": "Servers",
                "Host": "postgresql",
                "Port": 5432,
                "MaintenanceDB": "postgres",
                "Username": "postgres",
                "SSLMode": "prefer",
                "Comment": "Auto-configured PostgreSQL server"
              }
            }
          }
      ---
      apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: pgadmin-pvc
        namespace: postgres
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: {{ pgadmin_storage_size }}
      ---
      apiVersion: v1
      kind: Service
      metadata:
        name: pgadmin4
        namespace: postgres
        labels:
          app: pgadmin4
      spec:
        type: NodePort
        ports:
        - port: 80
          targetPort: 80
          nodePort: {{ pgadmin_nodeport }}
        selector:
          app: pgadmin4
  vars:
    pgadmin_email: "admin@admin.com"
    pgadmin_password: "admin123"
    pgadmin_nodeport: 32544
    pgadmin_storage_size: "2Gi"

- name: Apply pgAdmin deployment
  command: kubectl apply -f /tmp/pgadmin-deployment.yaml
  register: pgadmin_deploy_apply
  changed_when: pgadmin_deploy_apply.rc == 0

- name: Wait for PostgreSQL pod to be ready
  command: kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=postgresql -n postgres --timeout=300s
  register: postgresql_ready
  changed_when: postgresql_ready.rc == 0

- name: Wait for pgAdmin pod to be ready
  command: kubectl wait --for=condition=ready pod -l app=pgadmin4 -n postgres --timeout=300s
  register: pgadmin_ready
  changed_when: pgadmin_ready.rc == 0

- name: Get PostgreSQL connection details
  shell: kubectl get secret postgresql -n postgres -o jsonpath='{.data.postgres-password}' | base64 --decode
  register: postgres_decoded_password
  changed_when: false

- name: Get server public IP
  command: curl -s ifconfig.me
  register: public_ip
  changed_when: false
  ignore_errors: true

- name: Print PostgreSQL and pgAdmin access instructions
  debug:
    msg: |
      ========================================
      POSTGRESQL & PGADMIN SETUP COMPLETE
      ========================================
      
      ========================================
      SCHEMA-BASED PROD/TEST ENVIRONMENT
      ========================================
      
      ✅ Production Schema: prod.*
      ✅ Testing Schema: test.*
      ✅ Dedicated Users: prod_user, test_user
      ✅ Sample Data: Users and Orders tables
      ✅ Cross-schema Access: test_user can read prod data
      
      ========================================
      ACCESS OPTIONS
      ========================================
      
      pgAdmin Web Interface:
      - Primary Access: http://{{ public_ip.stdout | default(ansible_host) }}:{{ pgadmin_nodeport }}
      - From any device: http://104.241.54.17:{{ pgadmin_nodeport }}
      
      PostgreSQL Database:
      - Host: {{ public_ip.stdout | default(ansible_host) }}
      - Port: {{ postgres_nodeport }}
      - Database: {{ postgres_database }}
      
      Internal Kubernetes Access:
      - Service: postgresql.postgres.svc.cluster.local
      - Port: 5432
      
      ========================================
      SCHEMA CREDENTIALS
      ========================================
      
      pgAdmin (Admin Access):
      - Email: {{ pgadmin_email }}
      - Password: {{ pgadmin_password }}
      
      PostgreSQL Admin:
      - Username: postgres
      - Password: {{ postgres_password }}
      - Database: {{ postgres_database }}
      
      Production Schema User:
      - Username: prod_user
      - Password: prod123
      - Schema: prod
      
      Testing Schema User:
      - Username: test_user  
      - Password: test123
      - Schema: test (can also read prod)
      
      ========================================
      SCHEMA COMMANDS
      ========================================
      
      # Connect to production schema:
      psql -h {{ public_ip.stdout | default(ansible_host) }} -p {{ postgres_nodeport }} -U prod_user -d {{ postgres_database }}
      
      # Connect to test schema:
      psql -h {{ public_ip.stdout | default(ansible_host) }} -p {{ postgres_nodeport }} -U test_user -d {{ postgres_database }}
      
      # Admin connection (access all schemas):
      psql -h {{ public_ip.stdout | default(ansible_host) }} -p {{ postgres_nodeport }} -U postgres -d {{ postgres_database }}
      
      # Query production data:
      SELECT * FROM prod.users;
      SELECT * FROM prod.user_orders;
      
      # Query test data:
      SELECT * FROM test.users;
      SELECT * FROM test.user_orders;
      
      # Compare environments:
      SELECT * FROM public.schema_info;
      
      ========================================
      BACKUP SYSTEM (SCHEMA-AWARE)
      ========================================
      
      ✅ Automated backup system configured!
      - Schedule: Every 6 hours (0 */6 * * *)
      - Storage: 5GB dedicated backup PVC
      - Backups: Full, Production Schema, Test Schema
      - Retention: Last 10 backups of each type
      
      Manual Backup Commands:
      # Trigger full backup (all schemas):
      kubectl create job --from=cronjob/postgres-backup manual-backup-$(date +%s) -n postgres
      
      Manual Restore Commands:
      # Restore full database:
      kubectl apply -f /tmp/postgres-restore-job.yaml
      
      # Restore production schema only:
      kubectl apply -f /tmp/postgres-restore-prod-job.yaml
      
      # Restore test schema only:
      kubectl apply -f /tmp/postgres-restore-test-job.yaml
      
      # View schema information:
      kubectl apply -f /tmp/postgres-schema-info-job.yaml
      kubectl logs -n postgres job/postgres-schema-info
      
      ========================================
      TESTING UTILITIES
      ========================================
      
      # Copy production data to test (for testing):
      psql -h {{ public_ip.stdout | default(ansible_host) }} -p {{ postgres_nodeport }} -U test_user -d {{ postgres_database }} -c "SELECT copy_prod_to_test();"
      
      # Reset test data:
      psql -h {{ public_ip.stdout | default(ansible_host) }} -p {{ postgres_nodeport }} -U test_user -d {{ postgres_database }} -c "TRUNCATE test.orders, test.users CASCADE;"
      
      ========================================
      PGADMIN SCHEMA ACCESS
      ========================================
      
      In pgAdmin, you can access both schemas:
      1. Login with admin@admin.com/admin123
      2. Expand PostgreSQL Server > myapp > Schemas
      3. You'll see: public, prod, test
      4. Right-click on schema > "Query Tool" for schema-specific queries
      
      ========================================
      NEXT STEPS
      ========================================
      
      1. Access pgAdmin to explore prod/test schemas
      2. Connect with dedicated users for each environment
      3. Use copy_prod_to_test() function for data synchronization
      4. Set up automated testing workflows
      5. Monitor both environments independently
      6. For production: change default passwords!
  vars:
    postgres_password: "admin123"
    postgres_database: "myapp"
    postgres_nodeport: 32543
    pgadmin_email: "admin@admin.com"
    pgadmin_password: "admin123"
    pgadmin_nodeport: 32544 